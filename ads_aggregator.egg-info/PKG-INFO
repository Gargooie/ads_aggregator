Metadata-Version: 2.4
Name: ads-aggregator
Version: 1.0.0
Summary: Система агрегации рекламных данных из Meta Ads и Google Ads
Home-page: https://github.com/your-username/ads-aggregator
Author: Python Backend Developer
Author-email: developer@example.com
Project-URL: Bug Tracker, https://github.com/your-username/ads-aggregator/issues
Project-URL: Documentation, https://github.com/your-username/ads-aggregator/wiki
Keywords: advertising,ads,meta,facebook,google,adtech,martech,api,aggregation,campaigns,creatives,rotation,marketing
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: facebook-business>=18.0.0
Requires-Dist: google-ads>=22.1.0
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: pytest>=7.0.0
Requires-Dist: pytest-cov>=4.0.0
Requires-Dist: pytest-mock>=3.10.0
Requires-Dist: structlog>=23.1.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: asyncio-throttle>=1.0.2
Requires-Dist: black>=23.0.0
Requires-Dist: flake8>=6.0.0
Requires-Dist: mypy>=1.5.0
Requires-Dist: sphinx>=7.0.0
Requires-Dist: sphinx-rtd-theme>=1.3.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=7.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.3.0; extra == "docs"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# 📊 Ads Aggregator - Система агрегации рекламных данных

**AdTech/MarTech платформа для агрегации рекламных данных из Meta Ads и Google Ads**

## 🚀 Описание

Ads Aggregator — это Python-модуль для агрегации и анализа рекламных данных из различных источников (Meta Ads, Google Ads). Система предоставляет унифицированный интерфейс для получения статистики по кампаниям и креативам, а также инструменты для ротации объявлений.

### ✨ Основные возможности

- 🔗 **Интеграция с рекламными платформами**: Meta Ads API, Google Ads API
- 📈 **Унифицированное получение данных**: кампании, объявления, статистика
- 🔄 **Система ротации креативов**: 3 стратегии (round_robin, best_ctr, lowest_cpc)
- 📊 **Автоматический расчет метрик**: CTR, CPC
- 🛡️ **Обработка ошибок**: rate limits, аутентификация, недоступность данных
- ⚡ **Параллельные запросы**: ускорение получения данных
- 📄 **Экспорт в JSON**: структурированный вывод данных

## 🏗️ Архитектура

### Основные компоненты

```
ads_aggregator/
├── clients/
│   ├── base_client.py      # Абстрактный базовый класс
│   ├── meta_ads_client.py  # Клиент Meta Ads API
│   └── google_ads_client.py # Клиент Google Ads API
├── aggregator.py           # Агрегатор данных
├── rotator.py             # Система ротации креативов
└── exceptions.py          # Кастомные исключения
```

### Диаграмма компонентов

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────────┐
│   Meta Ads      │    │   Google Ads     │    │   Future Platforms  │
│     Client      │    │      Client      │    │    (TikTok, etc.)   │
└─────────────────┘    └──────────────────┘    └─────────────────────┘
         │                       │                        │
         └───────────────────────┼────────────────────────┘
                                 │
                    ┌─────────────────────┐
                    │   AdsAggregator     │
                    │   - Объединение     │
                    │   - Унификация      │
                    │   - Статистика      │
                    └─────────────────────┘
                                 │
                    ┌─────────────────────┐
                    │  CreativeRotator    │
                    │  - round_robin      │
                    │  - best_ctr         │
                    │  - lowest_cpc       │
                    └─────────────────────┘
```

## 🔧 Установка

### Требования

- Python 3.10+
- pip

### Установка зависимостей

```bash
# Клонирование репозитория
git clone <repository_url>
cd ads-aggregator

# Установка зависимостей
pip install -r requirements.txt

# Установка в режиме разработки
pip install -e .
```

### Альтернативная установка через pip

```bash
pip install ads-aggregator
```

## 📝 Быстрый старт

### 1. Настройка credentials

#### Meta Ads API

```python
meta_credentials = {
    'access_token': 'your_meta_access_token',
    'app_id': 'your_app_id', 
    'app_secret': 'your_app_secret',
    'account_id': 'act_your_account_id'
}
```

#### Google Ads API

```python
google_credentials = {
    'developer_token': 'your_developer_token',
    'client_id': 'your_oauth2_client_id',
    'client_secret': 'your_oauth2_client_secret', 
    'refresh_token': 'your_refresh_token',
    'customer_id': 'your_customer_id'
}
```

### 2. Базовое использование

```python
from datetime import date, timedelta
from ads_aggregator.clients.meta_ads_client import MetaAdsClient
from ads_aggregator.clients.google_ads_client import GoogleAdsClient
from ads_aggregator.aggregator import AdsAggregator
from ads_aggregator.rotator import CreativeRotator

# Инициализация клиентов
meta_client = MetaAdsClient(meta_credentials)
google_client = GoogleAdsClient(google_credentials)

# Создание агрегатора
aggregator = AdsAggregator([meta_client, google_client])

# Получение данных за последние 7 дней
end_date = date.today()
start_date = end_date - timedelta(days=7)

# Агрегация данных
data = aggregator.aggregate_data(start_date, end_date)

# Экспорт в JSON
json_data = aggregator.to_json(data, pretty=True)
print(json_data)

# Сводная статистика
stats = aggregator.get_summary_stats(data)
print(f"Всего кампаний: {stats['total_campaigns']}")
print(f"Общие расходы: ${stats['totals']['spend']:,.2f}")
```

### 3. Ротация креативов

```python
# Получаем креативы из первой кампании
campaign = data[0]
creatives = campaign['ads']

# Инициализируем ротатор
rotator = CreativeRotator(creatives)

# Различные стратегии ротации
next_ad_rr = rotator.choose_next("round_robin")
next_ad_ctr = rotator.choose_next("best_ctr")
next_ad_cpc = rotator.choose_next("lowest_cpc")

print(f"Round Robin: {next_ad_rr['ad_name']}")
print(f"Best CTR: {next_ad_ctr['ad_name']} (CTR: {next_ad_ctr['ctr']:.2f}%)")
print(f"Lowest CPC: {next_ad_cpc['ad_name']} (CPC: ${next_ad_cpc['cpc']:.2f})")
```

## 📊 Формат выходных данных

Агрегатор возвращает данные в следующем формате:

```json
[
  {
    "platform": "meta",
    "campaign_id": "123456789",
    "name": "Meta Campaign Example",
    "impressions": 12000,
    "clicks": 480,
    "spend": 156.78,
    "ads": [
      {
        "ad_id": "ad_123",
        "ad_name": "Creative A",
        "impressions": 6000,
        "clicks": 240,
        "spend": 78.39,
        "ctr": 4.0,
        "cpc": 0.33
      },
      {
        "ad_id": "ad_124", 
        "ad_name": "Creative B",
        "impressions": 6000,
        "clicks": 240,
        "spend": 78.39,
        "ctr": 4.0,
        "cpc": 0.33
      }
    ]
  }
]
```

## 🧪 Тестирование

### Запуск тестов

```bash
# Запуск всех тестов
python -m pytest tests/

# Запуск с покрытием кода
python -m pytest tests/ --cov=ads_aggregator

# Запуск конкретного теста
python -m pytest tests/test_rotator.py::TestCreativeRotator::test_ctr_calculation
```

### Запуск примера

```bash
# Демонстрация функциональности
python examples/usage_example.py
```

## 🔄 Стратегии ротации

### Round Robin
Циклический перебор креативов в порядке их добавления.

### Best CTR
Выбор креатива с максимальным показателем CTR (Click Through Rate).

### Lowest CPC
Выбор креатива с минимальным показателем CPC (Cost Per Click).

## 🛡️ Обработка ошибок

Система обрабатывает следующие типы ошибок:

- **AuthenticationError**: Проблемы с токенами доступа
- **RateLimitError**: Превышение лимитов API запросов
- **DataNotFoundError**: Отсутствие данных для запрошенного периода
- **InvalidTokenError**: Некорректные учетные данные

```python
from ads_aggregator.exceptions import AuthenticationError, RateLimitError

try:
    data = aggregator.aggregate_data(start_date, end_date)
except AuthenticationError:
    print("Проверьте токены доступа")
except RateLimitError:
    print("Превышен лимит запросов, попробуйте позже")
```

## 🚀 Расширение системы

### Добавление новых платформ

Для добавления новой рекламной платформы:

1. Создайте класс-наследник `BaseAdsClient`
2. Реализуйте методы `fetch_campaigns()` и `fetch_ads()`
3. Добавьте обработку специфичных для платформы ошибок

```python
class TikTokAdsClient(BaseAdsClient):
    def _get_platform_name(self):
        return "tiktok"

    def fetch_campaigns(self, start_date, end_date):
        # Реализация для TikTok Ads API
        pass

    def fetch_ads(self, campaign_id, start_date, end_date):
        # Реализация для TikTok Ads API
        pass
```

## 📚 API Документация

### BaseAdsClient

Абстрактный базовый класс для всех клиентов рекламных платформ.

**Методы:**
- `fetch_campaigns(start_date, end_date)` - получение кампаний
- `fetch_ads(campaign_id, start_date, end_date)` - получение объявлений

### AdsAggregator

Основной класс для агрегации данных.

**Методы:**
- `aggregate_data(start_date, end_date, parallel=True)` - агрегация данных
- `get_summary_stats(data)` - сводная статистика
- `to_json(data, pretty=True)` - экспорт в JSON
- `filter_by_platform(data, platform)` - фильтрация по платформе
- `filter_by_spend_threshold(data, min_spend)` - фильтрация по расходам

### CreativeRotator

Класс для ротации креативов.

**Методы:**
- `choose_next(strategy)` - выбор следующего креатива
- `get_rotation_stats()` - статистика по креативам
- `add_creative(creative)` - добавление креатива
- `remove_creative(ad_id)` - удаление креатива
- `simulate_rotation(iterations, strategy)` - симуляция ротации

## 🤝 Вклад в проект

1. Форкните репозиторий
2. Создайте ветку для новой функции (`git checkout -b feature/amazing-feature`)
3. Зафиксируйте изменения (`git commit -m 'Add amazing feature'`)
4. Отправьте в ветку (`git push origin feature/amazing-feature`)
5. Откройте Pull Request

## 📄 Лицензия

Этот проект лицензирован под MIT License - см. файл [LICENSE](LICENSE) для деталей.

## 🆘 Поддержка

Если у вас есть вопросы или проблемы:

- 📧 Email: support@ads-aggregator.com
- 🐛 Issues: [GitHub Issues](https://github.com/your-repo/ads-aggregator/issues)
- 📖 Wiki: [GitHub Wiki](https://github.com/your-repo/ads-aggregator/wiki)

## 🙏 Благодарности

- [Facebook Business SDK](https://github.com/facebook/facebook-python-business-sdk)
- [Google Ads API Python Client](https://github.com/googleads/google-ads-python)

---

**Создано с ❤️ для эффективного управления рекламными кампаниями**
